<?php

namespace App\Services;


use App\Entities\User;
use App\Entities\UserSession;
use App\Repositories\UserRepository;
use App\Repositories\UserSessionRepository;
use Exception;
use Nsingularity\GeneralModule\Foundation\Entities\GeneralUser;
use Nsingularity\GeneralModule\Foundation\Exceptions\CustomMessagesException;
use Nsingularity\GeneralModule\Foundation\Services\MainServices\AbstractService;
use ReflectionException;
use Symfony\Component\HttpFoundation\Cookie;

class AuthService extends AbstractService
{
    /**
     * @param $username
     * @param $password
     * @param $agent
     * @param bool $rememberMe
     * @return array
     * @throws CustomMessagesException|Exception
     */
    public function login($username, $password, $agent, $rememberMe = false)
    {
        $isEmail = !(validator(["email" => $username], ["email" => "email"]))->fails();

        $userRepository = new UserRepository();
        if ($isEmail) {
            $user = $userRepository->showByBasicCriteria(["email" => $username], false, "", false);
        } else {
            $user = $userRepository->showByBasicCriteria(["username" => $username], false, "", false);
        }

        if (is_null($user) || !$user->validatePassword($password)) {
            customException(trans("username and password not match"), false, 401);
        }

        $token = $this::generateTokenAuth($user, $agent, $rememberMe);

        return [
            "token" => "Bearer " . $token,
        ];
    }

    /**
     * @return array
     * @throws CustomMessagesException
     * @throws ReflectionException
     */
    public function logout()
    {
        $userSession = customAuth()->getUserSession();
        $userSession->setActive(false);
        $userSession->save();

        return [
            "token" => encrypt([rand(0, 100)]),
        ];
    }

    /**
     * @param $session
     */
    public function loadUserSession($session)
    {
        try {
            $session = str_replace("Bearer ", "", $session);
            $data    = json_decode(decrypt($session), 1) ? json_decode(decrypt($session), 1) : [];
        } catch (Exception $exception) {
            return;
        }

        $validator = validator($data, [
            "token_hashId" => "required",
            "agent"        => "required|in:" . base64_encode(request()->header('User-Agent')),
            "remember_me"  => "boolean",
            "expired_at"   => "required|integer|min:" . time(),
        ]);

        if ($validator->fails()) {
            return;
        }

        $userSessionRepository = new UserSessionRepository();
        /** @var UserSession $userSession */
        $userSession = $userSessionRepository->showByHashId($data['token_hashId'], [], false, '', false);
        $user        = $userSession->getUser();

        if ($user instanceof User) {
            customAuth()->setUser($user);
            customAuth()->setUserSession($userSession);
        }
    }

    /**
     * @param GeneralUser $user
     * @param $agent
     * @param $rememberMe
     * @return string
     * @throws Exception
     */
    public static function generateTokenAuth(GeneralUser $user, $agent, $rememberMe)
    {
        $userSession = new UserSession();
        $userSession->setActive(1);
        $userSession->setUserId($user->getId());
        $userSession->setRememberMe($rememberMe);
        $userSession->generateExpiredAt();
        $userSession->setUserAgent($agent);
        $userSession->save();

        return $userSession->generateToken();
    }

    public static function generateCookieAuth($authKey, $rememberMe = true)
    {
        return (new Cookie("auth", encrypt($authKey), self::calculationExpiredTIme($rememberMe)));
    }

    private static function calculationExpiredTIme($rememberMe)
    {
        return time() + ($rememberMe ? 3600 * 1000 : 600);
    }

}
