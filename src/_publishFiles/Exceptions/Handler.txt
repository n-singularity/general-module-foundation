<?php

namespace App\Exceptions;

use Exception;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Illuminate\Http\Request;
use Nsingularity\GeneralModul\Foundation\Supports\TelegramBotNotification;
use Symfony\Component\HttpFoundation\Response;

class Handler extends ExceptionHandler
{
    /**
     * A list of the exception types that are not reported.
     *
     * @var array
     */
    protected $dontReport = [
        CustomMessagesException::class,
        CustomMessagesViewException::class,
    ];

    /**
     * A list of the inputs that are never flashed for validation exceptions.
     *
     * @var array
     */
    protected $dontFlash = [
        'password',
        'password_confirmation',
    ];

    /**
     * Report or log an exception.
     *
     * @param Exception $exception
     * @return void
     *
     * @throws Exception
     */
    public function report(Exception $exception)
    {
        $forceReport = false;

        if ($exception instanceof CustomMessagesViewException) {
            $forceReport = $exception->isForceReport();
            if ($exception->getRealException() instanceof Exception) {
                $exception = $exception->getRealException();
            }
        }

        if ($exception instanceof CustomMessagesException) {
            $forceReport = $exception->isForceReport();
            if ($exception->getRealException() instanceof Exception) {
                $exception = $exception->getRealException();
            }
        }

        if (!in_array(get_class($exception), $this->dontReport) || $forceReport) {
            (new TelegramBotNotification("Error " . env("APP_ENV", '')))->sendException($exception);

            parent::report($exception);
        }

        parent::report($exception);
    }

    /**
     * Render an exception into an HTTP response.
     *
     * @param  Request  $request
     * @param Exception $exception
     * @return Response
     *
     * @throws Exception
     */
    public function render($request, Exception $exception)
    {
        if ($exception instanceof CustomMessagesException) {
            return response()->json(json_decode($exception->getMessage()))->setStatusCode($exception->getStatusCode());
        }

        if ($exception instanceof CustomMessagesViewException) {
            return response($exception->getView())->setStatusCode($exception->getStatusCode());
        }

        return parent::render($request, $exception);
    }
}
